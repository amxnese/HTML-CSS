body {
  font-family: "Courier New", Courier, monospace;
  background-color: antiquewhite;
  font-size: larger;
  text-align: center;
}

body {
  /* padding */
  /* a Shorthand property to set values for the thickness of the padding area.
  If left is omitted, it is the same as right. If bottom is omitted it is the 
  same as top, if right is omitted it is the same as top */

  /* top right bottom left */
  /* 5px 5px   5px    5px */
  padding: 5px;

  /* top right bottom left */
  /* 5px 10px  5px    10px */
  padding: 5px 10px;

  /* top right bottom left */
  /* 5px 10px  15px   10px*/
  padding: 5px 10px 15px;

  /* we can also set each side by itself */
  padding-right: 5px;
}

body {
  /* margin */
  /* Shorthand property to set values for the thickness of the margin area. all other padding properties applies the same on margin */

  /* top right bottom left */
  /* 5px 10px  15px   20px */
  margin: 5px 10px 15px 20px;

  margin: auto; /* sets all sides to auto, spreads all additional spaces equally to each side */
}

.header {
  /* background */
  background-image: url(../imgs/windows.jpg); /* setting an image as a background */
  background-repeat: repeat; /* default value is repeat, the image will keep on repeating both on x and y axis */
  background-repeat: no-repeat; /* prevents image from repeating */
  background-repeat: repeat-y; /* the image will repeat only on the y axis */
  background-repeat: repeat-x; /* the image will repeat only on the x axis */
  background-attachment: fixed; /* the background will be fixed the screen even when scrolling */
  background-attachment: scroll; /* default value is scroll, when scrolling the background will not follow and will stay on its postion */
  background-position: left top; /* the first value is for x and the second is for y, we can use right left top bottom and we can also use pixels and percentage */
  background-size: auto; /* default is auto, we can use cover so the background image covers all the screen, and we can use contain so the image be fully visible */
  background-size: 170px 140px; /* we can also use pixels or percentage to controll the image size, first value is for x and second is for y */
  color: aliceblue;
}

.header2 {
  width: 70%;
  margin: auto;

  /* border */
  border-width: 0 4px 3px 4px; /* a shorthand as padding and margin */
  border-color: rgb(119, 119, 119); /* a shorthand also */
  border-style: solid solid dashed; /* also a shorthand */
}

element {
  /* display */
  display: block; /* default value, add break lines before and after the element, respects margin and padding */
  display: inline; /* do not add break lines (elements are on the same line), respects margin and padding but only from left and right */
  display: inline-block; /* same as inline but respects margin and padding from all sides */
  display: none; /* element does not exist anymore */
  visibility: hidden; /* element exists but not visible, it is still holding its place */
}

/* nesting */
div p {
  /* this will affect all p tags that are inside of a div */
  font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
}

/* dimensions */
element {
  width: 50px; /* sets the width to 50px */
  height: 50px; /* sets the height to 50px */
  width: fit-content; /* sets the width as wide as the content inside */
  min-width: 50px; /* the element's widht will be 50px but will also be able to expand */
  min-height: 50px; /* same as told */
  max-width: 200px; /* now the width can't exceed 200px, meaning that the element has an interval of 50 and 200 px to expand in */
  max-height: 400px; /* same */
}

/* overflow */
element {
  overflow: hidden; /* if the content of an element exceeds its space it will be hidden */
  overflow: scroll; /* gives the element a scroller */
  overflow: auto; /* acts like hidden if the content fits, and acts like scroll if the content does not fit */
  /* we can also specify the overflow behavior of a specific axis (x or y)  */
  overflow-x: auto;
  overflow-y: auto;
}

/* text */
.header2 {
  /* text shadow : H-shadow V-shadow blue color */
  text-shadow: 1px 1px 1px rgb(92, 92, 249);
  text-align: center; /* controls the alignment of the text, we can also use right or left */
  vertical-align: middle; /* works the same as text-align but vertically, we use middle, top, bottom */
  direction: ltr; /* ltr for left to right, direction controls the direction of the context */
  text-decoration: none; /* used to decorate the text but mostly used to remove by default decorations by setting it to none */
  text-transform: capitalize; /* mostly used to change modify text capitalization */
  text-overflow: ellipsis; /* cuts the the additional text and adds three dots to hint that the text is cut */
}

/* spacing */
.header {
  letter-spacing: 2px; /* controls the space between letters */
  text-indent: 0; /* controls the text indentation */
  line-height: 1.6; /* controls the space between the lines vertically, 1.6 stands for 160% */
  word-spacing: 1px; /* controls the space between words */
  white-space: normal; /* controls the behavior of the element's content when it encounters a white space, normal is the default value, it add a line break whenever it reaches a white space */
  white-space: nowrap; /* does not add a break line after reaching a white space */
  word-break: break-word; /* prevents overflow by breaking words that are not meant to be broke */
}

/* inheretance */
/* 
Inheritance in CSS is a mechanism by which some CSS properties applied to a parent element are passed down 
to its child elements. This can help maintain a consistent style across a webpage without needing to repeatedly 
apply the same styles to multiple elements. However, not all CSS properties are inherited.
*/
/* 
some inhereted properties include: color, font-family, font-size, font-weight, font-style, font-variant, line-height,
text-align, text-indent, text-transform, text-shadow, letter-spacing, word-spacing, visibility 
*/
element {
  padding: inherit; /* the element will inherit the padding that were gave to his parent */
}

/* cursor */
.default-cursor {
  cursor: default;
}
.pointer-cursor {
  cursor: pointer;
}
.text-cursor {
  cursor: text;
}
.move-cursor {
  cursor: move;
}
.help-cursor {
  cursor: help;
}
.not-allowed-cursor {
  cursor: not-allowed;
}
.wait-cursor {
  cursor: wait;
}
.img-cursor {
  cursor: url('../imgs/windows.jpg'), auto;
}
